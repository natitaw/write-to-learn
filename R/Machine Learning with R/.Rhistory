ggplot(df.train, aes(Age)) + geom_histogram(bins=20, fill="blue", ha=0.5)
ggplot(df.train, aes(SibSp)) + geom_bar()
ggplot(df.train, aes(Fare)) + geom_histogram(fill="green",
color="black", alpha=0.5)
# Fill in Missing Data
library(dplyr)
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
# Fill in Missing Data
library(dplyr)
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
# Fill in the average age by passenger class
pl <- ggplot(df.train, aes(Pclass, Age)) + geom_boxplot(aes(group=Pclass,
fill=factor(Pclass)))
pl
# Fill in the average age by passenger class
pl <- ggplot(df.train, aes(Pclass, Age))
pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass)))
pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass), alpha=0.4))
pl
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)) + theme_bw()
dev.off()
# Logistic Regression using the Titanic Data Set
# as a method of classification
# Type I (FP) and Type II errors (FN)
df.train <- read.csv('titanic_train.csv')
head(df.train)
str(df.train)
# Check missing data using Amelia
library(Amelia)
# Miss Map -> This is cool and useful
help("missmap")
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
# Data Exploration
library(ggplot2)
library(ggthemes)
ggplot(df.train, aes(Survived)) + geom_bar()
ggplot(df.train, aes(Pclass)) + geom_bar(aes(fill=factor(Pclass)))
# Gender and Sex
ggplot(df.train, aes(Sex)) + geom_bar(aes(fill=factor(Sex)))
ggplot(df.train, aes(Age)) + geom_histogram(bins=20, fill="blue", ha=0.5)
ggplot(df.train, aes(SibSp)) + geom_bar()
ggplot(df.train, aes(Fare)) + geom_histogram(fill="green",
color="black", alpha=0.5)
# Fill in Missing Data
library(dplyr)
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
# Fill in the average age by passenger class
pl <- ggplot(df.train, aes(Pclass, Age))
pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass), alpha=0.4))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)) + theme_bw()
pl <- ggplot(df.train, aes(Pclass, Age))
pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass), alpha=0.4))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)) + theme_bw()
pl
# Logistic Regression using the Titanic Data Set
# as a method of classification
# Type I (FP) and Type II errors (FN)
df.train <- read.csv('titanic_train.csv')
head(df.train)
str(df.train)
# Check missing data using Amelia
library(Amelia)
# Miss Map -> This is cool and useful
help("missmap")
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
# Data Exploration
library(ggplot2)
library(ggthemes)
ggplot(df.train, aes(Survived)) + geom_bar()
ggplot(df.train, aes(Pclass)) + geom_bar(aes(fill=factor(Pclass)))
# Gender and Sex
ggplot(df.train, aes(Sex)) + geom_bar(aes(fill=factor(Sex)))
ggplot(df.train, aes(Age)) + geom_histogram(bins=20, fill="blue", ha=0.5)
ggplot(df.train, aes(SibSp)) + geom_bar()
ggplot(df.train, aes(Fare)) + geom_histogram(fill="green",
color="black", alpha=0.5)
# Fill in Missing Data
library(dplyr)
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
# Fill in the average age by passenger class
pl <- ggplot(df.train, aes(Pclass, Age))
pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass), alpha=0.4))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)) + theme_bw()
pl
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
# Fill in the average age by passenger class
pl <- ggplot(df.train, aes(Pclass, Age))
pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass), alpha=0.4))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)) + theme_bw()
pl
# Fill in the average age by passenger class
pl <- ggplot(df.train, aes(Pclass, Age))
pl <- pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass), alpha=0.4))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)) + theme_bw()
pl <- pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass, Gender), alpha=0.4))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)) + theme_bw()
df.train
pl <- pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass, Sex), alpha=0.4))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)) + theme_bw()
df.train
pl <- pl + geom_boxplot(aes(group=Pclass, fill=factor(Sex), alpha=0.4))
# Fill in the average age by passenger class
pl <- ggplot(df.train, aes(Pclass, Age))
pl <- pl + geom_boxplot(aes(group=Pclass, fill=factor(Sex), alpha=0.4))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)) + theme_bw()
pl <- pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass, Sex), alpha=0.4))
# Fill in the average age by passenger class
pl <- ggplot(df.train, aes(Pclass, Age))
pl <- pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass, Sex), alpha=0.4))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)) + theme_bw()
# Fill in the average age by passenger class
pl <- ggplot(df.train, aes(Pclass, Age))
pl <- pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass), alpha=0.4))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)) + theme_bw()
df.train
impute_age <- function(age,class){
out <- age
for (i in 1:length(age)){
if (is.na(age[i])){
if (class[i] == 1){
out[i] <- 37
}else if (class[i] == 2){
out[i] <- 29
}else{
out[i] <- 24
}
}else{
out[i]<-age[i]
}
}
return(out)
}
# Fill in the average age by passenger class
pl <- ggplot(df.train, aes(Pclass, Age))
pl <- pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass), alpha=0.4))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)) + theme_economist()
impute_age <- function(age,class){
out <- age
for (i in 1:length(age)){
if (is.na(age[i])){
if (class[i] == 1){
out[i] <- 37
}else if (class[i] == 2){
out[i] <- 29
}else{
out[i] <- 24
}
}else{
out[i]<-age[i]
}
}
return(out)
}
fixed.ages <- impute_age(df.train$Age, df.train$Pclass)
df.train$Age <- fixed.ages
## Miss Map
missmap(df.train, main="Imputation Check", col=("yellow", "black"))
## Miss Map
missmap(df.train, main="Imputation Check", col=("yellow", "black"))
## Miss Map
missmap(df.train, main='Imputation Check', col=("yellow", "black"))
## Miss Map
missmap(df.train, main='Imputation Check', col=('yellow', 'black'))
## Miss Map
missmap(df.train, main='Imputation Check',
col=('yellow', 'black'), legend=FALSE)
missmap(df.train, main="Titanic Training Data - Missings Map",
col=c("yellow", "black"), legend=FALSE)
## Miss Map
missmap(df.train, main='Imputation Check',
col=('yellow','black'), legend=FALSE)
## Miss Map
missmap(df.train, main='Imputation Check',
col=('yellow', 'black'), legend=FALSE)
## Miss Map
missmap(df.train , main='Imputation Check',
col=('yellow', 'black'), legend=FALSE)
missmap(df.train, main="Imputation Map", col=c("yellow", "black"))
missmap(df.train, main="Imputation Map", col=c("yellow", "black"),
legend=FALSE)
missmap(df.train, main="Imputation Map", col=c("yellow", "black"),
legend=FALSE)
source("~/Documents/GitHub/write-to-learn/R/Machine Learning with R/Logistic Regression.R")
source("~/Documents/GitHub/write-to-learn/R/Machine Learning with R/Logistic Regression.R")
source("~/Documents/GitHub/write-to-learn/R/Machine Learning with R/Logistic Regression.R")
source("~/Documents/GitHub/write-to-learn/R/Machine Learning with R/Logistic Regression.R")
# Logistic Regression using the Titanic Data Set
# as a method of classification
# Type I (FP) and Type II errors (FN)
df.train <- read.csv('titanic_train.csv')
head(df.train)
str(df.train)
# Check missing data using Amelia
library(Amelia)
# Miss Map -> This is cool and useful
help("missmap")
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
missmap(df.train, main="Imputation Map", col=c("yellow", "black"),
legend=FALSE)
library(dplyr)
# Select features
df.train <- select(df.train, -PassengerID, -Name, -Ticket, -Cabin )
head(df.train)
# Select features
df.train <- select(df.train, -PassengerId, -Name, -Ticket, -Cabin )
head(df.train)
df.train$Survived <- factor(df.train$Survived)
df.train$Pclass <- factor(df.train$Pclass)
df.train$Parch <- factor(df.train$Parch)
df.train$SibSp <- factor(df.train$SibSp)
str(df.train)
# Logistic Regression Model
log.model <- glm(Survived ~ . , family=binomial(link="logit"))
# Logistic Regression Model
log.model <- glm(Survived ~ . , family=binomial(link="logit"), data=df.train)
# Logistic Regression using the Titanic Data Set
# as a method of classification
# Type I (FP) and Type II errors (FN)
df.train <- read.csv('titanic_train.csv')
head(df.train)
str(df.train)
# Check missing data using Amelia
library(Amelia)
# Miss Map -> This is cool and useful
help("missmap")
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
# Logistic Regression Model
log.model <- glm(Survived ~ . , family=binomial(link="logit"), data=df.train)
# Logistic Regression using the Titanic Data Set
# as a method of classification
# Type I (FP) and Type II errors (FN)
df.train <- read.csv('titanic_train.csv')
head(df.train)
str(df.train)
# Check missing data using Amelia
library(Amelia)
# Miss Map -> This is cool and useful
help("missmap")
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
library(ggplot2)
library(ggthemes)
ggplot(df.train, aes(Survived)) + geom_bar()
# Logistic Regression Model
log.model <- glm(Survived ~ . , family=binomial(link="logit"), data=df.train)
str(df.train)
rm()
# Logistic Regression using the Titanic Data Set
# as a method of classification
# Type I (FP) and Type II errors (FN)
df.train <- read.csv('titanic_train.csv')
head(df.train)
str(df.train)
# Check missing data using Amelia
library(Amelia)
# Miss Map -> This is cool and useful
help("missmap")
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
# Logistic Regression using the Titanic Data Set
# as a method of classification
# Type I (FP) and Type II errors (FN)
df.train <- read.csv('titanic_train.csv')
head(df.train)
str(df.train)
# Check missing data using Amelia
library(Amelia)
# Miss Map -> This is cool and useful
help("missmap")
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
# Logistic Regression using the Titanic Data Set
# as a method of classification
# Type I (FP) and Type II errors (FN)
df.train <- read.csv('titanic_train.csv')
head(df.train)
str(df.train)
# Check missing data using Amelia
library(Amelia)
# Miss Map -> This is cool and useful
help("missmap")
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
rm(list = ls())
# Logistic Regression using the Titanic Data Set
# as a method of classification
# Type I (FP) and Type II errors (FN)
df.train <- read.csv('titanic_train.csv')
head(df.train)
str(df.train)
# Check missing data using Amelia
library(Amelia)
# Miss Map -> This is cool and useful
help("missmap")
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
# Fill in Missing Data
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
# Logistic Regression using the Titanic Data Set
# as a method of classification
# Type I (FP) and Type II errors (FN)
df.train <- read.csv('titanic_train.csv')
head(df.train)
str(df.train)
# Check missing data using Amelia
library(Amelia)
# Miss Map -> This is cool and useful
help("missmap")
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
# Data Exploration
library(ggplot2)
library(ggthemes)
ggplot(df.train, aes(Survived)) + geom_bar()
ggplot(df.train, aes(Pclass)) + geom_bar(aes(fill=factor(Pclass)))
# Gender and Sex
ggplot(df.train, aes(Sex)) + geom_bar(aes(fill=factor(Sex)))
ggplot(df.train, aes(Age)) + geom_histogram(bins=20, fill="blue", ha=0.5)
ggplot(df.train, aes(SibSp)) + geom_bar()
ggplot(df.train, aes(Fare)) + geom_histogram(fill="green",
color="black", alpha=0.5)
# Fill in Missing Data
missmap(df.train, main="Missing Map",
col=c("yellow", "black"), legend=FALSE)
# Fill in the average age by passenger class
pl <- ggplot(df.train, aes(Pclass, Age))
pl <- pl + geom_boxplot(aes(group=Pclass, fill=factor(Pclass), alpha=0.4))
pl + scale_y_continuous(breaks=seq(min(0), max(80), by=2)) + theme_economist()
# Create a function to replace missing age values
# Imputation of age based on class
impute_age <- function(age,class){
out <- age
for (i in 1:length(age)){
if (is.na(age[i])){
if (class[i] == 1){
out[i] <- 37
}else if (class[i] == 2){
out[i] <- 29
}else{
out[i] <- 24
}
}else{
out[i]<-age[i]
}
}
return(out)
}
fixed.ages <- impute_age(df.train$Age, df.train$Pclass)
df.train$Age <- fixed.ages
## Miss Map
missmap(df.train, main="Imputation Map", col=c("yellow", "black"),
legend=FALSE)
library(dplyr)
# Select features
df.train <- select(df.train, -PassengerId, -Name, -Ticket, -Cabin )
head(df.train)
# Convert to factors
df.train$Survived <- factor(df.train$Survived)
df.train$Pclass <- factor(df.train$Pclass)
df.train$Parch <- factor(df.train$Parch)
df.train$SibSp <- factor(df.train$SibSp)
str(df.train)
# Logistic Regression Model
log.model <- glm(Survived ~ . , family=binomial(link="logit"), data=df.train)
summary(log.model)
plot(log.model)
library(caTools)
set.seed(101)
split <- sample.split(df.train$Survived, SplitRatio=.7)
final.test <- subset(df.train, split==False)
final.train <- subset(df.train, split==TRUE)
final.test <- subset(df.train, split==FALSE)
head(final.test)
final.log.model <- glm(Survived ~ . , family=binomial(link="logit"),
data=final.train)
summary(final.log.model)
# Model Prediction
head(final.test, 2)
fitted.probs <- predict(final.log.model, final.test, type='response')
fitted.probs
fitted.results <- ifelse(fitted.probs>0.5, 1, 0)
misClassError <- mean(fitted.results != final.test$Survived)
print(1 - misClassError)
# Confusion Matrix
table(final.test)
# Confusion Matrix
table(final.test, fitted.probs>0.5)
# Confusion Matrix
table(final.test, fitted.probs>0.5)
# Confusion Matrix
table(final.test$Survived, fitted.probs>0.5)
# Confusion Matrix
table(final.test$Survived, fitted.probs>0.5)
# Confusion Matrix
table(final.test$Survived, fitted.probs>0.5)
# Confusion Matrix
table(final.test$Survived, fitted.probs>0.5)
setwd("~/Documents/GitHub/write-to-learn/R/Machine Learning with R")
# Logistic Regression
adult <- read.csv("adult_sal.csv")
head(adult)
# Logistic Regression
adult <- read.csv("adult_sal.csv")
head(adult)
library(dplyr)
adult <- select(adult, -X)
head(adult)
str(adult)
summary(adult)
# Logistic Regression
adult <- read.csv("adult_sal.csv")
head(adult)
library(dplyr)
adult <- select(adult, -X)
head(adult)
str(adult)
summary(adult)
# Logistic Regression
adult <- read.csv("adult_sal.csv")
head(adult)
library(dplyr)
adult <- select(adult, -X)
head(adult)
str(adult)
summary(adult)
# How many null employers are there
table(adult$type_employer)
head(adult)
# Combine employer types
unemp <- function(job){
job <- as.character(job)
if (job=="Never-worked" | job=="Without-pay"){
return("Unemployed")
}else{
return(job)
}
}
adult$type_employer <-sapply(adult$type_employer, unemp)
table(adult$type_employer)
group_emp <- function(job){
if (job=='Local-gov' | job=='State-gov'){
return('SL-gov')
}else if (job=='Self-emp-inc' | job=='Self-emp-not-inc'){
return('self-emp')
}else{
return(job)
}
}
adult$type_employer <- sapply(adult$type_employer,group_emp)
table(adult$type_employer)
# Marital Status
table(adult$marital)
# Reduce this to three basic troups: Married, not married, never married
group_marital <- function(mar){
mar <- as.character(mar)
# Not-Married
if (mar=='Separated' | mar=='Divorced' | mar=='Widowed'){
return('Not-Married')
# Never-Married
}else if(mar=='Never-married'){
return(mar)
#Married
}else{
return('Married')
}
}
adult$marital <- sapply(adult$marital,group_marital)
table(adult$marital)
head(adult, 3)
# Country column
table(adult$country)
Asia <- c('China','Hong','India','Iran','Cambodia','Japan', 'Laos' ,
'Philippines' ,'Vietnam' ,'Taiwan', 'Thailand')
North.America <- c('Canada','United-States','Puerto-Rico' )
Europe <- c('England' ,'France', 'Germany' ,'Greece','Holand-Netherlands','Hungary',
'Ireland','Italy','Poland','Portugal','Scotland','Yugoslavia')
Latin.and.South.America <- c('Columbia','Cuba','Dominican-Republic','Ecuador',
'El-Salvador','Guatemala','Haiti','Honduras',
'Mexico','Nicaragua','Outlying-US(Guam-USVI-etc)','Peru',
'Jamaica','Trinadad&Tobago')
Other <- c('South')
group_country <- function(ctry){
if (ctry %in% Asia){
return('Asia')
}else if (ctry %in% North.America){
return('North.America')
}else if (ctry %in% Europe){
return('Europe')
}else if (ctry %in% Latin.and.South.America){
return('Latin.and.South.America')
}else{
return('Other')
}
}
adult$country <- sapply(adult$country,group_country)
table(adult$country)
adult$type_employer <- sapply(adult$type_employer,factor)
adult$country <- sapply(adult$country,factor)
adult$marital <- sapply(adult$marital,factor)
str(adult)
